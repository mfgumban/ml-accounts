/*
 * This buildscript shows how mlcp dependencies can be easily declared and then uses in a Gradle configuration named
 * "mlcp". This configuration is then used as the classpath for MlcpTask, which is a simple extension of Gradle's
 * JavaExec task that exposes a number of mlcp arguments as task attributes.
 */
buildscript {
  repositories {
    jcenter()
    mavenLocal()
  }
  dependencies {
    classpath "com.marklogic:ml-gradle:2.8.0"
  }
}

apply plugin: "com.marklogic.ml-gradle"

repositories {
  jcenter()

  // Needed for mlcp dependencies
  maven { url "https://developer.marklogic.com/maven2/" }

  // Needed for hadoop dependencies for mlcp
  maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}


configurations {
  // This configuration captures the dependencies for running mlcp (Content Pump). This is only needed if you want
  // to run mlcp via Gradle tasks. If you do, using com.marklogic.gradle.task.MlcpTask is a useful starting point, as
  // shown below.  Need to force to use certain version of xml-apis library.
  mlcp {
      resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
      }
    }
}

/**
 * ML 8.0-5 and 7.0-6 introduced a single mlcp dependency - see http://developer.marklogic.com/maven2/com/marklogic/mlcp/.
 * The 8.0-5 mlcp may very well work on ML versions prior to 8.0-5. If it doesn't, try the mlcp-Hadoop2
 * and marklogic-mapreduce2 dependencies that are commented out by default instead of the mlcp dependency.
 *
 * Note that at least with version 8.0-5 of mlcp, mlcp will complain on Windows that it cannot find
 * bin/winutils.exe. This does not appear to have any impact on mlcp behavior though.
 */
dependencies {
  mlcp "com.marklogic:mlcp:8.0.6.3"

  /**
   * If you need to import delimited text, be sure to include this dependency as well.
   */
  mlcp "org.apache.commons:commons-csv:1.2"

  /**
   * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
   * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
   * mlcp include a directory or some other resource that provides a log4j.properties file.
   */
  mlcp files("lib")
}

/**
 * Example of using MlcpTask to import data with mlcp.
 */
task importProviders(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlAppConfig.contentDatabaseName
  port = mlAppConfig.restPort
  input_file_path = "data/providers"
  output_collections = "providers"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*providers,'/providers'"
  transform_module = "/mlcp/transforms.xqy"
  transform_namespace = "http://marklogic.com/mita-tac-demo/mlcp/transforms"
  transform_function = "envelope"
  /**
   * New in ml-gradle 2.6.0 - set this to define a URI in your content database for mlcp's log output to be written to
   * as a text document. This can also be a variable, Gradle property, etc.
   */
  //logOutputUri = "/slappy.txt"
}